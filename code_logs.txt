# Codebase Summary - Last Updated: 14/04/2025

## Project Structure
```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ FlagCarousel.tsx
â”‚   â”œâ”€â”€ Contact.tsx
â”‚   â”œâ”€â”€ LoadingSpinner.tsx
â”‚   â”œâ”€â”€ Testimonials.tsx
â”‚   â”œâ”€â”€ Services.tsx
â”‚   â”œâ”€â”€ NavItems.tsx
â”‚   â”œâ”€â”€ ThreeBackground.tsx
â”‚   â””â”€â”€ ...
â”œâ”€â”€ contexts/
â”‚   â””â”€â”€ AnimationContext.tsx
â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ HomePage.tsx
â”‚   â”œâ”€â”€ ServicesPage.tsx
â”‚   â””â”€â”€ ...
â”œâ”€â”€ utils/
â”‚   â””â”€â”€ performance.ts
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ articleData.ts
â”‚   â””â”€â”€ blogData.ts
â”œâ”€â”€ images/
â”œâ”€â”€ index.css
â””â”€â”€ main.tsx
```

## Complete Code Files

### FlagCarousel.tsx
```typescript
import React, { useState, useEffect, useRef } from 'react';
import { motion, useAnimation, useMotionValue, useTransform, useScroll } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { Globe, ChevronRight, ChevronDown } from 'lucide-react';
import { useAnimation as useAnimationContext } from '../contexts/AnimationContext';

const countries = [
  { name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§', region: 'Europe' },
  { name: 'United States', flag: 'ðŸ‡ºðŸ‡¸', region: 'North America' },
  { name: 'Australia', flag: 'ðŸ‡¦ðŸ‡º', region: 'Oceania' },
  { name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª', region: 'Europe' },
  { name: 'France', flag: 'ðŸ‡«ðŸ‡·', region: 'Europe' },
  { name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±', region: 'Europe' },
  { name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦', region: 'North America' },
  { name: 'New Zealand', flag: 'ðŸ‡³ðŸ‡¿', region: 'Oceania' },
  { name: 'Ireland', flag: 'ðŸ‡®ðŸ‡ª', region: 'Europe' },
  { name: 'Sweden', flag: 'ðŸ‡¸ðŸ‡ª', region: 'Europe' },
  { name: 'Denmark', flag: 'ðŸ‡©ðŸ‡°', region: 'Europe' },
  { name: 'Belgium', flag: 'ðŸ‡§ðŸ‡ª', region: 'Europe' },
];

const FlagCarousel = () => {
  const { disableAnimations } = useAnimationContext();
  const [showAllFlags, setShowAllFlags] = useState(false);
  const [viewportHeight, setViewportHeight] = useState('100vh');
  const controls = useAnimation();
  const { ref, inView } = useInView({
    threshold: 0.1,
    triggerOnce: false,
  });

  const x = useMotionValue(0);
  const rotateY = useTransform(x, [-200, 0, 200], [-15, 0, 15]);
  const scale = useTransform(x, [-200, 0, 200], [0.9, 1, 0.9]);
  const opacity = useTransform(x, [-200, 0, 200], [0.7, 1, 0.7]);

  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start end", "end start"]
  });

  useEffect(() => {
    const updateViewportHeight = () => {
      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);
      setViewportHeight(`${vh * 100}px`);
    };

    updateViewportHeight();
    window.addEventListener('resize', updateViewportHeight);
    window.addEventListener('orientationchange', updateViewportHeight);

    return () => {
      window.removeEventListener('resize', updateViewportHeight);
      window.removeEventListener('orientationchange', updateViewportHeight);
    };
  }, []);

  React.useEffect(() => {
    if (inView && !disableAnimations) {
      controls.start({
        opacity: 1,
        y: 0,
        transition: { duration: 0.8, ease: "easeOut" }
      });
    }
  }, [inView, controls, disableAnimations]);

  const renderMobileVersion = () => (
    <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
      {countries.map((country) => (
        <div
          key={country.name}
          className="bg-[#111111]/50 backdrop-blur-sm p-4 rounded-xl border border-[#3CAAFF]/20 transition-all duration-300 h-full flex flex-col items-center justify-center"
        >
          <div className="text-4xl mb-2">
            {country.flag}
          </div>
          <div className="text-white text-xs font-medium mb-1 text-center">
            {country.name}
          </div>
          <div className="text-[#3CAAFF] text-[10px] text-center">
            {country.region}
          </div>
        </div>
      ))}
    </div>
  );

  const renderDesktopVersion = () => (
    <div className="relative h-[500px]">
      <motion.div
        className="absolute inset-0 flex items-center justify-center"
        style={{
          x: disableAnimations ? 0 : x,
          rotateY: disableAnimations ? 0 : rotateY,
          scale: disableAnimations ? 1 : scale,
          opacity: disableAnimations ? 1 : opacity,
        }}
        drag={disableAnimations ? false : "x"}
        dragConstraints={{ left: -200, right: 200 }}
        dragElastic={0.1}
        whileHover={disableAnimations ? {} : { scale: 1.02 }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
      >
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6">
          {countries.map((country, index) => (
            <motion.div
              key={country.name}
              className="relative group"
              initial={disableAnimations ? {} : { opacity: 0, y: 20 }}
              animate={disableAnimations ? {} : {
                opacity: 1,
                y: 0,
                transition: { delay: index * 0.1 }
              }}
              whileHover={disableAnimations ? {} : { scale: 1.05, zIndex: 1 }}
            >
              <div className="bg-[#111111]/50 backdrop-blur-sm p-8 rounded-2xl border border-[#3CAAFF]/20 group-hover:border-[#3CAAFF]/50 transition-all duration-300 h-full flex flex-col items-center justify-center">
                <div className="text-6xl mb-4 transform group-hover:scale-110 transition-transform duration-300">
                  {country.flag}
                </div>
                <div className="text-white text-sm font-medium mb-1 text-center">
                  {country.name}
                </div>
                <div className="text-[#3CAAFF] text-xs text-center">
                  {country.region}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </div>
  );

  return (
    <section ref={containerRef} className="relative py-32 overflow-hidden">
      <div className="absolute inset-0 bg-[url('/noise.webp')] opacity-5"></div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="text-center mb-16">
          {disableAnimations ? (
            <>
              <h2 className="text-3xl sm:text-4xl font-bold mb-4">
                <span className="bg-gradient-to-r from-[#3CAAFF] to-[#00E0FF] bg-clip-text text-transparent">Global Reach</span>
              </h2>
              <p className="text-gray-400 text-base sm:text-lg max-w-2xl mx-auto">
                Trusted by equestrian businesses across the globe, from small yards to international brands
              </p>
            </>
          ) : (
            <>
              <motion.h2
                initial={{ opacity: 0, y: -20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-100px" }}
                transition={{ duration: 0.7, ease: [0.165, 0.84, 0.44, 1] }}
                className="text-3xl sm:text-4xl font-bold mb-4"
              >
                <span className="bg-gradient-to-r from-[#3CAAFF] to-[#00E0FF] bg-clip-text text-transparent">Global Reach</span>
              </motion.h2>
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.4 }}
                className="text-gray-400 text-base sm:text-lg max-w-2xl mx-auto"
              >
                Trusted by equestrian businesses across the globe, from small yards to international brands
              </motion.p>
            </>
          )}
        </div>

        {disableAnimations ? renderMobileVersion() : renderDesktopVersion()}

        {disableAnimations && (
          <div className="mt-8 sm:mt-16 text-center">
            <p className="text-gray-400 text-sm mb-4 sm:mb-6">
              And many more countries worldwide...
            </p>
          </div>
        )}
      </div>
    </section>
  );
};

export default FlagCarousel;
```

### HomePage.tsx
```typescript
import React from 'react';
import Hero from '../components/Hero';
import Services from '../components/Services';
import FlagCarousel from '../components/FlagCarousel';
import Facilities from '../components/Facilities';
import Testimonials from '../components/Testimonials';

const HomePage = () => {
  return (
    <div className="bg-gradient-to-b from-[#0A0A0A] via-[#101010] to-[#0A0A0A]">
      <Hero />
      <Services />
      <FlagCarousel />
      <Facilities />
      <Testimonials />
    </div>
  );
};

export default HomePage;
```

### Hero.tsx
```typescript
import { ArrowRight, Star, Compass } from 'lucide-react';
import { motion, useAnimation } from 'framer-motion';
import { useEffect, useRef, Suspense } from 'react';
import { useNavigate } from 'react-router-dom';
import { useInView } from 'framer-motion';
import image from "../images/Hero-Image.webp"
import ClientThreeBackground from './ClientThreeBackground';

const Hero = () => {
  const navigate = useNavigate();
  const controls = useAnimation();
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, margin: "-100px" });
  
  useEffect(() => {
    if (isInView) {
      controls.start("visible");
    }
  }, [isInView, controls]);

  return (
    <div className="relative min-h-screen overflow-hidden" ref={ref}>
      {/* Background with gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-[#0A0A0A]/50 via-[#111111]/30 to-[#0A0A0A]/50 z-30">
        <Suspense fallback={<div className="absolute inset-0 bg-[#0A0A0A]" />}>
          <ClientThreeBackground />
        </Suspense>
      </div>

      {/* Content */}
      <div className="relative z-40 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-32 pb-16">
        <div className="text-center lg:text-left lg:grid lg:grid-cols-2 lg:gap-8 items-center">
          <motion.div
            initial="hidden"
            animate={controls}
            variants={{
              hidden: { opacity: 0 },
              visible: { opacity: 1 }
            }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >
            {/* Badge */}
            <div className="inline-flex items-center space-x-2 bg-[#111111]/50 backdrop-blur-sm px-4 py-2 rounded-full border border-[#3CAAFF]/30">
              <Compass className="w-4 h-4 text-[#3CAAFF]" />
              <span className="text-sm text-[#ABABAB]">Equestrian Experts</span>
            </div>

            {/* Main heading */}
            <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold tracking-tight relative">
              <span className="block text-[#F5F5F7]">Transform Ideas</span>
              <span className="block mt-2 bg-gradient-to-r from-[#3CAAFF] to-[#00E0FF] bg-clip-text text-transparent pb-2">
                Digital Reality
              </span>
            </h1>

            {/* Description */}
            <p className="text-lg text-[#ABABAB] max-w-3xl">
              Get in touch today for a no-obligation, one-to-one consultation about your project. Depending on the scope of the project, we aim to deliver your perfect website within approximately a week. We won't consider it complete until you're 100% satisfied, and we offer a transparent, fixed and affordable price. No business is complete without a professional website
            </p>

            {/* CTA buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start">
              <button
                onClick={() => navigate('/contact')}
                className="inline-flex items-center px-8 py-3 rounded-full bg-gradient-to-r from-[#3CAAFF] to-[#00E0FF] text-[#0A0A0A] font-medium hover:shadow-lg hover:shadow-[#3CAAFF]/25 transition-all duration-300"
              >
                Contact Us
                <ArrowRight className="ml-2 w-5 h-5" />
              </button>
              <button
                onClick={() => navigate('/services')}
                className="inline-flex items-center px-8 py-3 rounded-full border border-[#3CAAFF]/30 hover:border-[#3CAAFF]/60 text-[#ABABAB] hover:text-[#F5F5F7] transition-colors duration-300"
              >
                Explore Services
              </button>
            </div>

            {/* Social proof */}
            <div className="pt-8 border-t border-[#222222]/30">
              <div className="flex items-center justify-center lg:justify-start space-x-8">
                <div>
                  <div className="flex items-center">
                    {[...Array(5)].map((_, i) => (
                      <Star key={i} className="w-5 h-5 text-[#3CAAFF] fill-current" />
                    ))}
                  </div>
                  <p className="mt-2 text-sm text-[#777777]">Trusted by 100+ equestrians</p>
                </div>
                <div className="h-12 w-px bg-[#222222]/30"></div>
                <div>
                  <p className="text-2xl font-bold text-[#F5F5F7]">6</p>
                  <p className="text-sm text-[#777777]">Years of excellence</p>
                </div>
                <div className="h-12 w-px bg-[#222222]/30"></div>
                <div>
                  <p className="text-2xl font-bold text-[#F5F5F7]">Â£200</p>
                  <p className="text-sm text-[#777777]">Prices starting from</p>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Hero image/illustration */}
          <div className="mt-12 lg:mt-0 relative">
            <div className="relative mx-auto max-w-[500px]">
              <div className="aspect-w-5 aspect-h-3 rounded-2xl overflow-hidden bg-gradient-to-br from-[#3CAAFF]/10 to-[#00E0FF]/10 backdrop-blur-3xl">
                <img
                  src={image}
                  alt="Elegant Horse"
                  className="object-cover w-full h-full rounded-2xl mix-blend-luminosity opacity-80"
                  loading="lazy"
                  width={500}
                  height={300}
                />
                <div className="absolute inset-0 bg-gradient-to-tr from-[#0A0A0A] via-transparent to-transparent"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Hero;
```

### Services.tsx
[Previous Services.tsx code remains unchanged...]

### Facilities.tsx
[Previous Facilities.tsx code remains unchanged...]

### Testimonials.tsx
[Previous Testimonials.tsx code remains unchanged...]

### Contact.tsx
[Previous Contact.tsx code remains unchanged...]

### ClientThreeBackground.tsx
```typescript
import { lazy } from 'react';

const ThreeBackground = lazy(() => import('./ThreeBackground'));

export default function ClientThreeBackground() {
  return <ThreeBackground />;
}
```

### ThreeBackground.tsx
```typescript
import { useRef, useEffect, useState } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { Sphere } from '@react-three/drei';
import * as THREE from 'three';

function AnimatedSphere() {
  const sphereRef = useRef<THREE.Mesh>(null);
  const frameCount = useRef(0);

  useFrame(({ clock }) => {
    if (!sphereRef.current) return;

    // Throttle updates to every other frame
    frameCount.current = (frameCount.current + 1) % 2;
    if (frameCount.current !== 0) return;

    const elapsed = clock.getElapsedTime();
    // More subtle movement
    sphereRef.current.position.y = Math.sin(elapsed * 0.5) * 0.15;
    sphereRef.current.position.x = Math.cos(elapsed * 0.3) * 0.1;
    sphereRef.current.rotation.x = elapsed * 0.1;
    sphereRef.current.rotation.y = elapsed * 0.05;
  });

  return (
    <Sphere ref={sphereRef} args={[1.5, 32, 32]} position={[1, 0, -1]}>
      <meshPhongMaterial
        color="#3CAAFF"
        opacity={0.08}
        transparent
        wireframe
      />
    </Sphere>
  );
}

export default function ThreeBackground() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <div className="absolute inset-0 bg-[#0A0A0A]" />;
  }

  return (
    <div className="absolute inset-0 -z-10">
      <Canvas 
        camera={{ position: [0, 0, 5] }}
        dpr={[1, 1.5]}
        gl={{ antialias: false }}
      >
        <ambientLight intensity={0.3} />
        <pointLight position={[10, 10, 10]} intensity={0.5} />
        <AnimatedSphere />
      </Canvas>
    </div>
  );
}
```

### AnimationContext.tsx
```typescript
import React, { createContext, useContext, useEffect, useState } from 'react';

interface AnimationContextType {
  isMobile: boolean;
  disableAnimations: boolean;
}

const AnimationContext = createContext<AnimationContextType>({
  isMobile: false,
  disableAnimations: false,
});

export const AnimationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isMobile, setIsMobile] = useState(false);
  const [disableAnimations, setDisableAnimations] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth < 768;
      setIsMobile(mobile);
      setDisableAnimations(mobile);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);

    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  return (
    <AnimationContext.Provider value={{ isMobile, disableAnimations }}>
      {children}
    </AnimationContext.Provider>
  );
};

export const useAnimation = () => useContext(AnimationContext);
```

### main.tsx
```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { HelmetProvider } from 'react-helmet-async';
import { measurePerformance } from './utils/performance';

// Start performance monitoring in development
measurePerformance();

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
);
```

### App.tsx
```typescript
import React, { lazy, Suspense } from 'react';
import { BrowserRouter } from 'react-router-dom';
import { motion } from 'framer-motion';
import Header from './components/Header';
import Footer from './components/Footer';
import HomePage from './pages/HomePage';
import { HelmetProvider } from 'react-helmet-async';
import { AnimationProvider } from './contexts/AnimationContext';
import AppRoutes from './routes';

// Lazy load pages (except HomePage)
const ServicesPage = lazy(() => import('./pages/ServicesPage'));
const ArticlePage = lazy(() => import('./pages/ArticlePage'));
const BlogPage = lazy(() => import('./pages/BlogPage'));
const ContactPage = lazy(() => import('./pages/ContactPage'));

// Loading component
const LoadingSpinner = () => (
  <div className="min-h-screen flex items-center justify-center bg-[#0A0A0A]">
    <motion.div
      animate={{ rotate: 360 }}
      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
      className="w-12 h-12 border-4 border-[#3CAAFF] border-t-transparent rounded-full"
    />
  </div>
);

const App: React.FC = () => {
  return (
    <HelmetProvider>
      <BrowserRouter>
        <AnimationProvider>
          <AppRoutes />
        </AnimationProvider>
      </BrowserRouter>
    </HelmetProvider>
  );
};

export default App;
```

### routes.tsx
```typescript
import React, { lazy, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import HomePage from './pages/HomePage';
import LoadingSpinner from './components/LoadingSpinner';

// Lazy load pages (except HomePage)
const ServicesPage = lazy(() => import('./pages/ServicesPage'));
const ArticlePage = lazy(() => import('./pages/ArticlePage'));
const BlogPage = lazy(() => import('./pages/BlogPage'));
const ContactPage = lazy(() => import('./pages/ContactPage'));

const AppRoutes: React.FC = () => {
  return (
    <>
      <Header />
      <main>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/services" element={
            <Suspense fallback={<LoadingSpinner />}>
              <ServicesPage />
            </Suspense>
          } />
          <Route path="/articles" element={
            <Suspense fallback={<LoadingSpinner />}>
              <ArticlePage />
            </Suspense>
          } />
          <Route path="/articles/:slug" element={
            <Suspense fallback={<LoadingSpinner />}>
              <ArticlePage />
            </Suspense>
          } />
          <Route path="/blog" element={
            <Suspense fallback={<LoadingSpinner />}>
              <BlogPage />
            </Suspense>
          } />
          <Route path="/contact" element={
            <Suspense fallback={<LoadingSpinner />}>
              <ContactPage />
            </Suspense>
          } />
        </Routes>
      </main>
      <Footer />
    </>
  );
};

export default AppRoutes;
```

## Configuration Files

### vite.config.ts
```